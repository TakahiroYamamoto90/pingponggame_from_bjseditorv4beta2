"use strict";
/**
 * Generated by the Babylon.JS Editor v4.0.0-beta.2
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@babylonjs/core");
/**
 * Requires the nedded scripts for the given nodes array and attach them.
 * @param nodes the array of nodes to attach script (if exists).
 */
function requireScriptForNodes(scriptsMap, nodes) {
    var _a, _b, _c, _d, _e, _f, _g;
    var _loop_1 = function (n) {
        if (!n.metadata || !n.metadata.script || !n.metadata.script.name || n.metadata.script.name === "None") {
            return "continue";
        }
        var exports_1 = scriptsMap[n.metadata.script.name];
        if (!exports_1) {
            return "continue";
        }
        // Add prototype.
        var prototype = exports_1.default.prototype;
        for (var key in prototype) {
            if (!prototype.hasOwnProperty(key) || key === "constructor") {
                continue;
            }
            n[key] = prototype[key].bind(n);
        }
        // Call constructor
        prototype.constructor.call(n);
        // Check start
        if (exports_1.default.prototype.onStart) {
            n.getScene().onBeforeRenderObservable.addOnce(function () { return n["onStart"](); });
        }
        // Check update
        if (exports_1.default.prototype.onUpdate) {
            n.getScene().onBeforeRenderObservable.add(function () { return n["onUpdate"](); });
        }
        // Check properties
        var properties = (_a = n.metadata.script.properties) !== null && _a !== void 0 ? _a : {};
        for (var key in properties) {
            var p = properties[key];
            n[key] = p.value;
        }
        // Check linked children.
        var childrenLinks = (_b = exports_1.default._ChildrenValues) !== null && _b !== void 0 ? _b : [];
        var _loop_2 = function (link) {
            var child = n.getChildren((function (node) { return node.name === link.nodeName; }), true)[0];
            n[link.propertyKey] = child;
        };
        for (var _i = 0, childrenLinks_1 = childrenLinks; _i < childrenLinks_1.length; _i++) {
            var link = childrenLinks_1[_i];
            _loop_2(link);
        }
        // Check linked nodes from scene.
        var sceneLinks = (_c = exports_1.default._SceneValues) !== null && _c !== void 0 ? _c : [];
        for (var _a = 0, sceneLinks_1 = sceneLinks; _a < sceneLinks_1.length; _a++) {
            var link = sceneLinks_1[_a];
            var node = n._scene.getNodeByName(link.nodeName);
            n[link.propertyKey] = node;
        }
        // Check particle systems
        var particleSystemLinks = (_d = exports_1.default._ParticleSystemValues) !== null && _d !== void 0 ? _d : [];
        var _loop_3 = function (link) {
            var ps = n._scene.particleSystems.filter(function (ps) { return ps.emitter === n && ps.name === link.particleSystemName; })[0];
            n[link.propertyKey] = ps;
        };
        for (var _b = 0, particleSystemLinks_1 = particleSystemLinks; _b < particleSystemLinks_1.length; _b++) {
            var link = particleSystemLinks_1[_b];
            _loop_3(link);
        }
        // Check pointer events
        var pointerEvents = (_e = exports_1.default._PointerValues) !== null && _e !== void 0 ? _e : [];
        var _loop_4 = function (event_1) {
            n._scene.onPointerObservable.add(function (e) {
                var _a;
                if (e.type !== event_1.type) {
                    return;
                }
                if (!event_1.onlyWhenMeshPicked) {
                    return n[event_1.propertyKey](e);
                }
                if (((_a = e.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) === n) {
                    n[event_1.propertyKey](e);
                }
            });
        };
        for (var _c = 0, pointerEvents_1 = pointerEvents; _c < pointerEvents_1.length; _c++) {
            var event_1 = pointerEvents_1[_c];
            _loop_4(event_1);
        }
        // Check keyboard events
        var keyboardEvents = (_f = exports_1.default._KeyboardValues) !== null && _f !== void 0 ? _f : [];
        var _loop_5 = function (event_2) {
            n._scene.onKeyboardObservable.add(function (e) {
                if (event_2.type && e.type !== event_2.type) {
                    return;
                }
                if (!event_2.keys.length) {
                    return n[event_2.propertyKey](e);
                }
                if (event_2.keys.indexOf(e.event.keyCode) !== -1) {
                    n[event_2.propertyKey](e);
                }
            });
        };
        for (var _d = 0, keyboardEvents_1 = keyboardEvents; _d < keyboardEvents_1.length; _d++) {
            var event_2 = keyboardEvents_1[_d];
            _loop_5(event_2);
        }
        // Retrieve impostors
        if (n instanceof core_1.Mesh && !n.physicsImpostor) {
            n.physicsImpostor = (_g = n._scene.getPhysicsEngine()) === null || _g === void 0 ? void 0 : _g.getImpostorForPhysicsObject(n);
        }
    };
    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
        var n = nodes_1[_i];
        _loop_1(n);
    }
}
/**
 * Attaches all available scripts on nodes of the given scene.
 * @param scene the scene reference that contains the nodes to attach scripts.
 */
function attachScripts(scriptsMap, scene) {
    requireScriptForNodes(scriptsMap, scene.meshes);
    requireScriptForNodes(scriptsMap, scene.lights);
    requireScriptForNodes(scriptsMap, scene.cameras);
    requireScriptForNodes(scriptsMap, scene.transformNodes);
    var _loop_6 = function (scriptKey) {
        var script = scriptsMap[scriptKey];
        if (script.IsGraph) {
            var instance_1 = new script.default(scene);
            scene.executeWhenReady(function () { return instance_1["onStart"](); });
            scene.onBeforeRenderObservable.add(function () { return instance_1["onUpdate"](); });
        }
    };
    // Graphs
    for (var scriptKey in scriptsMap) {
        _loop_6(scriptKey);
    }
}
exports.attachScripts = attachScripts;
/**
 * Configures and attaches the post-processes of the given scene.
 * @param scene the scene where to create the post-processes and attach to its cameras.
 * @param rootUrl the root Url where to find extra assets used by pipelines. Should be the same as the scene.
 */
function configurePostProcesses(scene, rootUrl) {
    if (rootUrl === void 0) { rootUrl = null; }
    var _a;
    if (rootUrl === null || !((_a = scene.metadata) === null || _a === void 0 ? void 0 : _a.postProcesses)) {
        return;
    }
    // Load  post-processes configuration
    var data = scene.metadata.postProcesses;
    if (data.ssao) {
        var ssao = core_1.SSAO2RenderingPipeline.Parse(data.ssao.json, scene, rootUrl);
        if (data.ssao.enabled) {
            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(ssao.name, scene.cameras);
        }
    }
    if (data.standard) {
        var standard = core_1.StandardRenderingPipeline.Parse(data.standard.json, scene, rootUrl);
        if (!data.standard.enabled) {
            scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(standard.name, scene.cameras);
        }
    }
    if (data.default) {
        var def = core_1.DefaultRenderingPipeline.Parse(data.default.json, scene, rootUrl);
        if (!data.default.enabled) {
            scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(def.name, scene.cameras);
        }
    }
}
exports.configurePostProcesses = configurePostProcesses;
/**
 * Sets the decorated member visible in the inspector.
 * @param type the property type.
 * @param name optional name to be shown in the editor's inspector.
 * @param defaultValue optional default value set in the TS code.
 */
function visibleInInspector(type, name, defaultValue) {
    return function (target, propertyKey) {
        var _a;
        var ctor = target.constructor;
        ctor._InspectorValues = (_a = ctor._InspectorValues) !== null && _a !== void 0 ? _a : [];
        ctor._InspectorValues.push({
            type: type,
            name: name !== null && name !== void 0 ? name : propertyKey.toString(),
            propertyKey: propertyKey.toString(),
            defaultValue: defaultValue,
        });
    };
}
exports.visibleInInspector = visibleInInspector;
/**
 * Sets the decorated member linked to a child node.
 * @param nodeName defines the name of the node in children to retrieve.
 */
function fromChildren(nodeName) {
    return function (target, propertyKey) {
        var _a;
        var ctor = target.constructor;
        ctor._ChildrenValues = (_a = ctor._ChildrenValues) !== null && _a !== void 0 ? _a : [];
        ctor._ChildrenValues.push({
            nodeName: nodeName !== null && nodeName !== void 0 ? nodeName : propertyKey.toString(),
            propertyKey: propertyKey.toString(),
        });
    };
}
exports.fromChildren = fromChildren;
/**
 * Sets the decorated member linked to a node in the scene.
 * @param nodeName defines the name of the node in the scene to retrieve.
 */
function fromScene(nodeName) {
    return function (target, propertyKey) {
        var _a;
        var ctor = target.constructor;
        ctor._SceneValues = (_a = ctor._SceneValues) !== null && _a !== void 0 ? _a : [];
        ctor._SceneValues.push({
            nodeName: nodeName !== null && nodeName !== void 0 ? nodeName : propertyKey.toString(),
            propertyKey: propertyKey.toString(),
        });
    };
}
exports.fromScene = fromScene;
/**
 * Sets the decorated member linked to a particle system which has the current Mesh attached.
 * @param particleSystemname the name of the attached particle system to retrieve.
 */
function fromParticleSystems(particleSystemname) {
    return function (target, propertyKey) {
        var _a;
        var ctor = target.constructor;
        ctor._ParticleSystemValues = (_a = ctor._ParticleSystemValues) !== null && _a !== void 0 ? _a : [];
        ctor._ParticleSystemValues.push({
            particleSystemName: particleSystemname !== null && particleSystemname !== void 0 ? particleSystemname : propertyKey.toString(),
            propertyKey: propertyKey.toString(),
        });
    };
}
exports.fromParticleSystems = fromParticleSystems;
/**
 * Sets the decorated member function to be called on the given pointer event is fired.
 * @param type the event type to listen to execute the decorated function.
 * @param onlyWhenMeshPicked defines wether or not the decorated function should be called only when the mesh is picked. default true.
 */
function onPointerEvent(type, onlyWhenMeshPicked) {
    if (onlyWhenMeshPicked === void 0) { onlyWhenMeshPicked = true; }
    return function (target, propertyKey) {
        var _a;
        if (typeof (target[propertyKey]) !== "function") {
            throw new Error("Decorated propery \"" + propertyKey.toString() + "\" in class \"" + target.constructor.name + "\" must be a function.");
        }
        var ctor = target.constructor;
        ctor._PointerValues = (_a = ctor._PointerValues) !== null && _a !== void 0 ? _a : [];
        ctor._PointerValues.push({
            type: type,
            onlyWhenMeshPicked: onlyWhenMeshPicked,
            propertyKey: propertyKey.toString(),
        });
    };
}
exports.onPointerEvent = onPointerEvent;
/**
 * Sets the decorated member function to be called on the given keyboard key(s) is/are pressed.
 * @param key the key or array of key to listen to execute the decorated function.
 */
function onKeyboardEvent(key, type) {
    return function (target, propertyKey) {
        var _a;
        if (typeof (target[propertyKey]) !== "function") {
            throw new Error("Decorated propery \"" + propertyKey.toString() + "\" in class \"" + target.constructor.name + "\" must be a function.");
        }
        var ctor = target.constructor;
        ctor._KeyboardValues = (_a = ctor._KeyboardValues) !== null && _a !== void 0 ? _a : [];
        ctor._KeyboardValues.push({
            type: type,
            keys: Array.isArray(key) ? key : [key],
            propertyKey: propertyKey.toString(),
        });
    };
}
exports.onKeyboardEvent = onKeyboardEvent;
//# sourceMappingURL=tools.js.map